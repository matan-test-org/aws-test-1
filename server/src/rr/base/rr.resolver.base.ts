/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteRrArgs } from "./DeleteRrArgs";
import { RrFindManyArgs } from "./RrFindManyArgs";
import { RrFindUniqueArgs } from "./RrFindUniqueArgs";
import { Rr } from "./Rr";
import { RrService } from "../rr.service";

@graphql.Resolver(() => Rr)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RrResolverBase {
  constructor(
    protected readonly service: RrService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Rr",
    action: "read",
    possession: "any",
  })
  async _rrsMeta(
    @graphql.Args() args: RrFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Rr])
  @nestAccessControl.UseRoles({
    resource: "Rr",
    action: "read",
    possession: "any",
  })
  async rrs(@graphql.Args() args: RrFindManyArgs): Promise<Rr[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Rr, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rr",
    action: "read",
    possession: "own",
  })
  async rr(@graphql.Args() args: RrFindUniqueArgs): Promise<Rr | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rr)
  @nestAccessControl.UseRoles({
    resource: "Rr",
    action: "delete",
    possession: "any",
  })
  async deleteRr(@graphql.Args() args: DeleteRrArgs): Promise<Rr | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
